@{
    ViewData["Title"] = "Villa Booking Assistant";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-robot fs-4 me-2"></i>
                        <h4 class="mb-0">🏨 Villa Booking Assistant</h4>
                        <div class="ms-auto">
                            <span class="badge bg-success">Online</span>
                        </div>
                    </div>
                    <small class="text-white-50">Ask me about villa availability, booking, or any questions!</small>
                </div>
                
                <div class="card-body p-0">
                    <!-- Chat Messages Container -->
                    <div id="chatMessages" class="chat-container p-3" style="height: 500px; overflow-y: auto;">
                        <!-- Welcome Message -->
                        <div class="message bot-message">
                            <div class="d-flex align-items-start mb-3">
                                <div class="avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                                    <i class="bi bi-robot"></i>
                                </div>
                                <div class="message-content bot-message-bg p-3 rounded">
                                    <p class="mb-1 text-dark">👋 Hello! I'm your villa booking assistant. I can help you with:</p>
                                    <ul class="mb-1 text-dark">
                                        <li>🔍 Finding available villas</li>
                                        <li>📅 Checking availability for specific dates</li>
                                        <li>💰 Villa pricing and amenities</li>
                                        <li>📝 Booking assistance</li>
                                    </ul>
                                    <p class="mb-0 text-dark">What can I help you with today?</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card-footer bg-light">
                    <!-- Quick Action Buttons -->
                    <div class="mb-3">
                        <div class="d-flex flex-wrap gap-2">
                            <button type="button" class="btn btn-outline-primary btn-sm quick-action" data-message="Show me available villas">
                                🏠 Browse Villas
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm quick-action" data-message="Find a villa for 4 people this weekend">
                                👥 Weekend for 4
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm quick-action" data-message="What villas are under $200 per night?">
                                💰 Budget Options
                            </button>
                            <button type="button" class="btn btn-outline-warning btn-sm quick-action" data-message="Show me luxury villas with pools">
                                🏊 Luxury Villas
                            </button>
                        </div>
                    </div>
                    
                    <!-- Input Form -->
                    <form id="chatForm" class="d-flex">
                        <input type="text" id="messageInput" class="form-control me-2" 
                               placeholder="Type your message here..." 
                               autocomplete="off">
                        <button type="submit" id="sendButton" class="btn btn-primary">
                            <i class="bi bi-send"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
$(document).ready(function() {
    const chatMessages = $('#chatMessages');
    const messageInput = $('#messageInput');
    const sendButton = $('#sendButton');
    const chatForm = $('#chatForm');

    // Auto-scroll to bottom
    function scrollToBottom() {
        chatMessages.scrollTop(chatMessages[0].scrollHeight);
    }

    // Convert markdown-style links to HTML links
    function convertMarkdownLinks(text) {
        // Convert [text](url) to <a href="url" target="_blank">text</a>
        return text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="btn btn-sm btn-outline-primary ms-2" target="_blank">$1</a>');
    }

    // Add message to chat
    function addMessage(message, isUser = false) {
        const messageClass = isUser ? 'user-message' : 'bot-message';
        const bgClass = isUser ? 'user-message-bg' : 'bot-message-bg';
        const textClass = isUser ? 'text-white' : 'text-dark';
        const avatar = isUser ? 
            `<div class="avatar bg-success text-white rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                <i class="bi bi-person"></i>
             </div>` :
            `<div class="avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                <i class="bi bi-robot"></i>
             </div>`;

        // Convert markdown links to HTML links for bot messages
        const processedMessage = isUser ? message : convertMarkdownLinks(message);

        const messageHtml = `
            <div class="message ${messageClass}">
                <div class="d-flex align-items-start mb-3">
                    ${!isUser ? avatar : ''}
                    <div class="message-content ${bgClass} p-3 rounded ${textClass}" style="max-width: 85%; word-wrap: break-word;">
                        ${processedMessage.replace(/\n/g, '<br>')}
                    </div>
                    ${isUser ? avatar : ''}
                </div>
            </div>
        `;
        
        chatMessages.append(messageHtml);
        scrollToBottom();
    }

    // Show typing indicator
    function showTypingIndicator() {
        const typingHtml = `
            <div class="message bot-message typing-indicator">
                <div class="d-flex align-items-start mb-3">
                    <div class="avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="message-content bot-message-bg p-3 rounded">
                        <div class="typing-dots">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        chatMessages.append(typingHtml);
        scrollToBottom();
    }

    // Remove typing indicator
    function removeTypingIndicator() {
        $('.typing-indicator').remove();
    }

    // Send message function
    async function sendMessage(message) {
        if (!message.trim()) return;

        // Add user message
        addMessage(message, true);
        
        // Clear input
        messageInput.val('');
        
        // Disable input and button
        messageInput.prop('disabled', true);
        sendButton.prop('disabled', true);
        
        // Show typing indicator
        showTypingIndicator();

        try {
            const response = await fetch('/Chatbot/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    context: null
                })
            });

            const data = await response.json();
            
            // Remove typing indicator
            removeTypingIndicator();
            
            if (data.response) {
                addMessage(data.response, false);
            } else {
                addMessage("I'm sorry, I couldn't process your request. Please try again.", false);
            }
        } catch (error) {
            console.error('Error:', error);
            removeTypingIndicator();
            addMessage("I'm sorry, there was an error processing your request. Please try again.", false);
        } finally {
            // Re-enable input and button
            messageInput.prop('disabled', false);
            sendButton.prop('disabled', false);
            messageInput.focus();
        }
    }

    // Form submit handler
    chatForm.on('submit', function(e) {
        e.preventDefault();
        const message = messageInput.val().trim();
        if (message) {
            sendMessage(message);
        }
    });

    // Quick action button handlers
    $('.quick-action').on('click', function() {
        const message = $(this).data('message');
        sendMessage(message);
    });

    // Enter key handler
    messageInput.on('keypress', function(e) {
        if (e.which === 13) {
            e.preventDefault();
            chatForm.submit();
        }
    });

    // Focus on input when page loads
    messageInput.focus();
});
</script>

<style>
/* Chat styling */
.chat-container {
    background-color: #f8f9fa;
}

.user-message-bg {
    background-color: #007bff;
    margin-left: auto;
}

.bot-message-bg {
    background-color: #e9ecef;
    margin-right: auto;
}

.message-content {
    border-radius: 18px !important;
    position: relative;
}

.message-content::before {
    content: '';
    position: absolute;
    top: 15px;
    width: 0;
    height: 0;
    border: 8px solid transparent;
}

.user-message .message-content::before {
    right: -16px;
    border-left-color: #007bff;
}

.bot-message .message-content::before {
    left: -16px;
    border-right-color: #e9ecef;
}

/* Typing indicator */
.typing-dots {
    display: flex;
    align-items: center;
    gap: 4px;
}

.typing-dots span {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #6c757d;
    animation: typing 1.4s infinite ease-in-out;
}

.typing-dots span:nth-child(1) {
    animation-delay: -0.32s;
}

.typing-dots span:nth-child(2) {
    animation-delay: -0.16s;
}

@@keyframes typing {
    0%, 80%, 100% {
        transform: scale(0);
        opacity: 0.5;
    }
    40% {
        transform: scale(1);
        opacity: 1;
    }
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .message-content {
        max-width: 90% !important;
    }
}

/* Style for villa detail links */
.message-content a {
    color: #0066cc !important;
    text-decoration: none;
    border: 1px solid #0066cc;
    padding: 5px 10px;
    border-radius: 15px;
    display: inline-block;
    margin: 5px 5px 0 0;
    transition: all 0.3s ease;
}

.message-content a:hover {
    background-color: #0066cc;
    color: white !important;
    text-decoration: none;
}
</style>
}